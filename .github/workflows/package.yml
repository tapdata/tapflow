name: Package Binaries

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  # 获取版本号
  get-version:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(git describe --tags | grep -o '^v[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/^v//' || echo '0.0.0')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # 二进制文件构建任务
  build-and-publish:
    needs: get-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            platform: ubuntu
            arch: x86_64
          - os: ubuntu-22.04
            platform: centos
            arch: x86_64
            is_centos7: true
          - os: macos-latest
            platform: darwin
            arch: x86_64
          - os: windows-latest
            platform: windows
            arch: x86_64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64

      - name: Install make (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install make
          
      - name: Build binary
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          VERSION: ${{ needs.get-version.outputs.version }}
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.is_centos7 }}" = "true" ]; then
            make centos7 VERSION=$VERSION
          else
            make clean setup current VERSION=$VERSION
          fi

      - name: Generate checksum (Linux)
        if: runner.os == 'Linux' && !matrix.is_centos7
        shell: bash
        run: |
          cd dist
          sha256sum * > SHA256SUMS.${{ matrix.platform }}.txt

      - name: Generate checksum (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cd dist
          for file in *; do
            if [ -f "$file" ] && [ "$file" != "SHA256SUMS.darwin.txt" ]; then
              shasum -a 256 "$file" >> SHA256SUMS.darwin.txt
            fi
          done

      - name: Generate checksum (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd dist
          Get-ChildItem -File | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA256 $_.Name).Hash.ToLower()
            "$hash  $($_.Name)" | Out-File -Append -Encoding utf8 SHA256SUMS.windows.txt
          }

      - name: Fix line endings (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd dist
          (Get-Content SHA256SUMS.windows.txt) | Set-Content -Encoding utf8 SHA256SUMS.windows.txt

      - name: Install rsync (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install rsync

      - name: Deploy to rsync server (Unix)
        if: runner.os != 'Windows'
        shell: bash
        env:
          VERSION: ${{ needs.get-version.outputs.version }}
        run: |
          echo '${{ secrets.RSYNC_PASSWORD }}' > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          
          # First rsync for version directory
          rsync --password-file=/tmp/rsync.passwd -vzrt --progress ./dist/ "rsync://${{ secrets.RSYNC_USER }}@${{ secrets.RSYNC_HOST }}/data/enterprise-artifact/gz/tapflow/$VERSION/"
          
          # Rename files for latest directory
          pushd dist
          for file in tapsh-$VERSION-*; do
            if [ -f "$file" ]; then
              new_name=$(echo "$file" | sed "s/$VERSION/latest/")
              cp "$file" "$new_name"
            fi
          done
          
          # Second rsync for latest directory - only sync latest files
          rsync --password-file=/tmp/rsync.passwd -vzrt --progress --include="tapsh-latest-*" --include="SHA256SUMS.*" --exclude="*" ./ "rsync://${{ secrets.RSYNC_USER }}@${{ secrets.RSYNC_HOST }}/data/enterprise-artifact/gz/tapflow/latest/" || true
          popd

      - name: Deploy to rsync server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          VERSION: ${{ needs.get-version.outputs.version }}
          RSYNC_PASSWORD: ${{ secrets.RSYNC_PASSWORD }}
        run: |
          $ErrorActionPreference = "Continue"
          $env:RSYNC_PASSWORD | Out-File -FilePath "$env:TEMP\rsync.passwd" -Encoding ASCII
          
          # First rsync for version directory
          rsync --password-file="$env:TEMP\rsync.passwd" -vzrt --progress ./dist/ "rsync://${{ secrets.RSYNC_USER }}@${{ secrets.RSYNC_HOST }}/data/enterprise-artifact/gz/tapflow/${{ env.VERSION }}/"
          
          # Rename files for latest directory
          Push-Location dist
          Get-ChildItem -Filter "tapsh-${{ env.VERSION }}-*" | ForEach-Object {
            $pattern = [regex]::Escape("tapsh-${{ env.VERSION }}-")
            $newName = $_.Name -replace $pattern, "tapsh-latest-"
            Copy-Item -Path $_.Name -Destination $newName -Force
          }
          
          # Second rsync for latest directory - only sync latest files
          rsync --password-file="$env:TEMP\rsync.passwd" -vzrt --progress --include="tapsh-latest-*" --include="SHA256SUMS.*" --exclude="*" ./ "rsync://${{ secrets.RSYNC_USER }}@${{ secrets.RSYNC_HOST }}/data/enterprise-artifact/gz/tapflow/latest/"
          Pop-Location
          
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Rsync completed with exit code $LASTEXITCODE"
          }
          exit 0 